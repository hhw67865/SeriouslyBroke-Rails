# Task ID: 4
# Title: Implement RESTful API Endpoints
# Status: pending
# Dependencies: 3
# Priority: high
# Description: Create RESTful controllers for all CRUD operations on core models, serving both HTML views and JSON responses.
# Details:
Implement Rails controllers with RESTful actions for:
1. Users (profile management only)
2. Categories
3. Entries (transactions)
4. Items
5. Budgets
6. SavingsPools

Ensure controllers respond with HTML for normal page loads and JSON for AJAX interactions. Implement strong parameters for security. Add pagination for list views. Implement proper error handling with flash messages. Follow Rails conventions for controller organization and naming.

# Test Strategy:
Write RSpec tests for all controller actions, testing both HTML and JSON responses. Verify proper HTML templates, JSON structure, status codes, and error messages. Test pagination and filtering functionality. Ensure RuboCop compliance for all code.

# Subtasks:
## 1. Implement Categories Controller with RESTful Endpoints [in-progress]
### Dependencies: None
### Description: Create a controller for Categories with all CRUD operations (index, show, create, update, destroy) that returns JSON responses.
### Details:
Generate the Categories controller with `rails g controller Api::V1::Categories`. Implement index, show, create, update, and destroy actions. Use strong parameters with a private `category_params` method that permits only allowed attributes. Add authentication checks to ensure users can only access their own categories. Return appropriate HTTP status codes (200 for success, 201 for creation, 204 for deletion, 400/422 for validation errors, 404 for not found).

## 2. Implement Entries (Transactions) Controller with RESTful Actions [pending]
### Dependencies: 4.1
### Description: Create a controller for Entries with all CRUD operations that responds with HTML for normal page loads and JSON for AJAX requests.
### Details:
Generate the Entries controller with `rails g controller Entries`. Implement index, show, new, create, edit, update, and destroy actions. Use strong parameters with a private `entry_params` method. Add Devise authentication with before_action filters to ensure users can only access their own entries. Implement filtering by date range and category in the index action. Add pagination for the index view. Create proper views with forms for new and edit actions. Include flash messages for successful operations and errors. Use respond_to blocks to handle both HTML and JSON formats.

## 3. Implement Budgets Controller with RESTful Actions [pending]
### Dependencies: 4.2
### Description: Create a controller for Budgets with all CRUD operations that responds with HTML for normal page loads and JSON for AJAX requests.
### Details:
Generate the Budgets controller with `rails g controller Budgets`. Implement index, show, new, create, edit, update, and destroy actions. Use strong parameters with a private `budget_params` method. Add Devise authentication with before_action filters to ensure users can only access their own budgets. Create proper views with forms for new and edit actions. Include flash messages for successful operations and errors. Use respond_to blocks to handle both HTML and JSON formats. Include related category information in the views and JSON responses where appropriate.

## 4. Implement SavingsPools Controller with RESTful Actions [pending]
### Dependencies: 4.3
### Description: Create a controller for SavingsPools with all CRUD operations that responds with HTML for normal page loads and JSON for AJAX requests.
### Details:
Generate the SavingsPools controller with `rails g controller SavingsPools`. Implement index, show, new, create, edit, update, and destroy actions. Use strong parameters with a private `savings_pool_params` method. Add Devise authentication with before_action filters to ensure users can only access their own savings pools. Create proper views with forms for new and edit actions. Include flash messages for successful operations and errors. Use respond_to blocks to handle both HTML and JSON formats. Include current amount and target amount in the views and JSON responses.

## 5. Implement Items Controller with RESTful Actions [pending]
### Dependencies: 4.4
### Description: Create a controller for Items with all CRUD operations that responds with HTML for normal page loads and JSON for AJAX requests.
### Details:
Generate the Items controller with `rails g controller Items`. Implement index, show, new, create, edit, update, and destroy actions. Use strong parameters with a private `item_params` method. Add Devise authentication with before_action filters to ensure users can only access their own items. Create proper views with forms for new and edit actions. Include flash messages for successful operations and errors. Use respond_to blocks to handle both HTML and JSON formats. Implement pagination for the index action if the items list could be large.

## 6. Implement Users Profile Management [pending]
### Dependencies: 4.5
### Description: Create controller actions for user profile management (show, edit, update) that respond with HTML for normal page loads and JSON for AJAX requests.
### Details:
Extend the Devise Users controller or create a ProfilesController with `rails g controller Profiles`. Implement show, edit, and update actions for profile management. Use strong parameters with a private `user_params` or `profile_params` method that permits only profile-related attributes (not authentication fields). Add Devise authentication with before_action filters to ensure users can only access their own profile. Create proper views with forms for edit action. Include flash messages for successful operations and errors. Use respond_to blocks to handle both HTML and JSON formats.

## 7. Implement Error Handling and Response Standardization [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5, 4.6
### Description: Create a standardized approach to error handling, flash messages, and JSON responses across all controllers.
### Details:
Create a concerns module (e.g., `ResponseHandler`) that can be included in all controllers. Implement methods for standardized flash messages and JSON responses with proper status codes. Handle common errors like record not found, validation errors, and unauthorized access. Create helper methods for pagination metadata. Ensure all controllers use this standardized approach for consistent behavior. Add proper error pages for 404, 422, and 500 errors.

## 8. Create Controller Documentation [pending]
### Dependencies: 4.7
### Description: Document all controller actions with examples, required parameters, and response formats.
### Details:
Create a markdown document that details all controller actions. For each action, document: URL, HTTP method, required parameters, available formats (HTML/JSON), example request, example response, possible error responses, and authentication requirements. Include information about pagination for list views. Store the documentation in the project repository and make it accessible to developers.

