# Task ID: 6
# Title: Savings Pools CRUD Operations Implementation
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Implement complete CRUD operations for Savings Pools with forms that match the design patterns established in the Categories section.
# Details:
1. Create new savings pool form at `app/views/savings_pools/new.html.erb`
2. Create edit savings pool form at `app/views/savings_pools/edit.html.erb`
3. Create a shared form partial at `app/views/savings_pools/_form.html.erb`
4. Implement SimpleForm integration with brand-colored focus states:
```erb
<%= simple_form_for @savings_pool do |f| %>
  <div class="card mb-6">
    <div class="p-6">
      <h2 class="text-xl font-semibold mb-4"><%= form_title %></h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="col-span-full">
          <%= f.input :name, 
            input_html: { class: 'form-input' },
            wrapper_html: { class: 'mb-4' } %>
        </div>
        
        <div>
          <%= f.input :target_amount, 
            input_html: { class: 'form-input' },
            wrapper_html: { class: 'mb-4' } %>
        </div>
        
        <div>
          <%= f.input :target_date, 
            as: :date, 
            html5: true,
            input_html: { class: 'form-input' },
            wrapper_html: { class: 'mb-4' } %>
        </div>
        
        <div class="col-span-full">
          <%= f.association :categories, 
            collection: Category.savings, 
            label_method: :name, 
            value_method: :id, 
            input_html: { class: 'form-select', multiple: true },
            hint: 'Select categories that contribute to this savings pool' %>
        </div>
        
        <div class="col-span-full">
          <%= f.input :description, 
            input_html: { class: 'form-textarea', rows: 3 },
            wrapper_html: { class: 'mb-4' } %>
        </div>
      </div>
    </div>
  </div>
  
  <div class="flex justify-end space-x-4">
    <%= link_to 'Cancel', savings_pools_path, class: 'btn-secondary' %>
    <%= f.button :submit, class: 'btn-primary' %>
  </div>
<% end %>
```
5. Create savings pool show view at `app/views/savings_pools/show.html.erb`
6. Implement delete confirmation modal using Stimulus.js
7. Update SavingsPoolsController with all CRUD actions
8. Add validations to SavingsPool model
9. Implement flash messages for successful/failed operations

# Test Strategy:
1. Test creating a new savings pool with valid data
2. Test validation errors display correctly
3. Test editing an existing savings pool
4. Test deleting a savings pool with confirmation
5. Verify form styling matches Categories section
6. Test category selection is limited to savings categories only
7. Verify flash messages display correctly for all operations
8. Test multiple category selection functionality
