{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Navigation Consolidation Implementation",
        "description": "Replace separate 'Expenses' and 'Income' sidebar items with a single 'Entries' navigation item that provides tab-based filtering.",
        "details": "1. Update the sidebar navigation in `app/views/shared/_sidebar.html.erb`\n2. Remove existing 'Expenses' and 'Income' items\n3. Add new 'Entries' item with appropriate icon (use heroicons)\n4. Create a new controller action in EntriesController to handle the unified view\n5. Implement tab-based filtering using Stimulus.js controller:\n```javascript\n// app/javascript/controllers/tab_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [\"tab\", \"panel\"]\n  \n  connect() {\n    this.showTab(this.tabTargets[0].dataset.tabId || \"all\")\n  }\n  \n  switch(event) {\n    event.preventDefault()\n    this.showTab(event.currentTarget.dataset.tabId)\n  }\n  \n  showTab(id) {\n    this.tabTargets.forEach(tab => {\n      tab.classList.toggle(\"active\", tab.dataset.tabId === id)\n    })\n    \n    this.panelTargets.forEach(panel => {\n      panel.classList.toggle(\"hidden\", panel.dataset.panelId !== id)\n    })\n  }\n}\n```\n6. Style active tab state using brand colors from custom.css\n7. Ensure the active navigation item is highlighted correctly",
        "testStrategy": "1. Verify sidebar navigation displays single 'Entries' item\n2. Test tab-based filtering for Expenses, Income, and Savings\n3. Confirm active states are styled correctly using brand colors\n4. Test navigation on mobile devices to ensure responsive behavior\n5. Verify correct routes are generated when clicking navigation items",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Entries Management Table Interface",
        "description": "Create a professional table-based interface for entries management with filtering, sorting, and actions following the Categories items_list pattern.",
        "details": "1. Create a new entries index view at `app/views/entries/index.html.erb`\n2. Implement responsive table structure following Categories pattern:\n```erb\n<div class=\"container mx-auto px-4 py-8\">\n  <div class=\"flex justify-between items-center mb-6\">\n    <h1 class=\"text-2xl font-bold\">Entries</h1>\n    <%= link_to 'New Entry', new_entry_path, class: 'btn-primary' %>\n  </div>\n  \n  <div data-controller=\"tab\" class=\"mb-6\">\n    <div class=\"border-b border-gray-200\">\n      <nav class=\"-mb-px flex space-x-8\">\n        <a href=\"#\" data-tab-target data-tab-id=\"all\" data-action=\"click->tab#switch\" class=\"tab-link\">All</a>\n        <a href=\"#\" data-tab-target data-tab-id=\"expense\" data-action=\"click->tab#switch\" class=\"tab-link\">Expenses</a>\n        <a href=\"#\" data-tab-target data-tab-id=\"income\" data-action=\"click->tab#switch\" class=\"tab-link\">Income</a>\n        <a href=\"#\" data-tab-target data-tab-id=\"savings\" data-action=\"click->tab#switch\" class=\"tab-link\">Savings</a>\n      </nav>\n    </div>\n    \n    <div data-panel-target data-panel-id=\"all\" class=\"mt-4\">\n      <%= render 'entries_table', entries: @entries %>\n    </div>\n    <div data-panel-target data-panel-id=\"expense\" class=\"mt-4 hidden\">\n      <%= render 'entries_table', entries: @expense_entries %>\n    </div>\n    <div data-panel-target data-panel-id=\"income\" class=\"mt-4 hidden\">\n      <%= render 'entries_table', entries: @income_entries %>\n    </div>\n    <div data-panel-target data-panel-id=\"savings\" class=\"mt-4 hidden\">\n      <%= render 'entries_table', entries: @savings_entries %>\n    </div>\n  </div>\n</div>\n```\n3. Create a partial for the entries table at `app/views/entries/_entries_table.html.erb`\n4. Implement sortable columns using Stimulus.js\n5. Add search functionality with debounced input\n6. Implement pagination using Pagy gem (version 6.0+)\n7. Style table with consistent hover states and spacing\n8. Add edit and delete actions with appropriate styling\n9. Update EntriesController to handle filtering, sorting, and pagination",
        "testStrategy": "1. Test table rendering with various data sets\n2. Verify filtering works correctly between All, Expenses, Income, and Savings\n3. Test sorting functionality for each column\n4. Verify search functionality works across item names and descriptions\n5. Test pagination with large datasets\n6. Verify edit and delete actions function correctly\n7. Test responsive behavior on mobile devices",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Budgets Index Page Implementation",
        "description": "Create a card-based layout for the Budgets index page that matches the Categories design pattern, including visual progress indicators.",
        "details": "1. Create a new budgets index view at `app/views/budgets/index.html.erb`\n2. Implement card-based layout similar to Categories index:\n```erb\n<div class=\"container mx-auto px-4 py-8\">\n  <div class=\"flex justify-between items-center mb-6\">\n    <h1 class=\"text-2xl font-bold\">Budgets</h1>\n    <%= link_to 'New Budget', new_budget_path, class: 'btn-primary' %>\n  </div>\n  \n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n    <% @budgets.each do |budget| %>\n      <div class=\"card\">\n        <div class=\"p-6\">\n          <div class=\"flex justify-between items-start\">\n            <h2 class=\"text-xl font-semibold\"><%= budget.category.name %></h2>\n            <div class=\"dropdown\">\n              <!-- Actions dropdown -->\n            </div>\n          </div>\n          <p class=\"text-gray-600 mb-4\"><%= budget.period %></p>\n          \n          <div class=\"mb-2 flex justify-between\">\n            <span class=\"text-sm text-gray-600\">Progress</span>\n            <span class=\"text-sm font-medium\"><%= number_to_percentage(budget.usage_percentage, precision: 0) %></span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5\">\n            <div class=\"h-2.5 rounded-full\" style=\"width: <%= budget.usage_percentage %>%; background-color: var(--color-primary);\"></div>\n          </div>\n          \n          <div class=\"mt-4 flex justify-between\">\n            <div>\n              <p class=\"text-sm text-gray-600\">Spent</p>\n              <p class=\"font-semibold\"><%= number_to_currency(budget.spent_amount) %></p>\n            </div>\n            <div class=\"text-right\">\n              <p class=\"text-sm text-gray-600\">Budget</p>\n              <p class=\"font-semibold\"><%= number_to_currency(budget.amount) %></p>\n            </div>\n          </div>\n        </div>\n      </div>\n    <% end %>\n    \n    <% if @budgets.empty? %>\n      <div class=\"col-span-full\">\n        <%= render 'shared/empty_state', \n          title: 'No budgets yet', \n          description: 'Create your first budget to start tracking your spending.',\n          action_text: 'Create Budget',\n          action_path: new_budget_path %>\n      </div>\n    <% end %>\n  </div>\n</div>\n```\n3. Create a shared empty state partial at `app/views/shared/_empty_state.html.erb`\n4. Add filtering by category type (only expense categories)\n5. Implement search functionality for budgets by category name\n6. Style progress bars using brand colors from custom.css\n7. Update BudgetsController to handle filtering and search",
        "testStrategy": "1. Verify card layout matches Categories design pattern\n2. Test progress visualization with various budget usage percentages\n3. Verify empty state displays correctly when no budgets exist\n4. Test filtering by category type\n5. Verify search functionality works correctly\n6. Test responsive behavior on mobile devices\n7. Verify all brand colors are applied correctly from custom.css",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Budget CRUD Operations Implementation",
        "description": "Implement complete CRUD operations for Budgets with forms that match the design patterns established in the Categories section.",
        "details": "1. Create new budget form at `app/views/budgets/new.html.erb`\n2. Create edit budget form at `app/views/budgets/edit.html.erb`\n3. Create a shared form partial at `app/views/budgets/_form.html.erb`\n4. Implement SimpleForm integration with brand-colored focus states:\n```erb\n<%= simple_form_for @budget do |f| %>\n  <div class=\"card mb-6\">\n    <div class=\"p-6\">\n      <h2 class=\"text-xl font-semibold mb-4\"><%= form_title %></h2>\n      \n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div class=\"col-span-full\">\n          <%= f.association :category, \n            collection: Category.expense, \n            label_method: :name, \n            value_method: :id, \n            include_blank: 'Select a category',\n            input_html: { class: 'form-select' } %>\n        </div>\n        \n        <div>\n          <%= f.input :amount, \n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div>\n          <%= f.input :period, \n            collection: Budget.periods.keys.map { |p| [p.humanize, p] },\n            input_html: { class: 'form-select' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div class=\"col-span-full\">\n          <%= f.input :notes, \n            input_html: { class: 'form-textarea', rows: 3 },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"flex justify-end space-x-4\">\n    <%= link_to 'Cancel', budgets_path, class: 'btn-secondary' %>\n    <%= f.button :submit, class: 'btn-primary' %>\n  </div>\n<% end %>\n```\n5. Create budget show view at `app/views/budgets/show.html.erb`\n6. Implement delete confirmation modal using Stimulus.js\n7. Update BudgetsController with all CRUD actions\n8. Add validations to Budget model\n9. Implement flash messages for successful/failed operations",
        "testStrategy": "1. Test creating a new budget with valid data\n2. Test validation errors display correctly\n3. Test editing an existing budget\n4. Test deleting a budget with confirmation\n5. Verify form styling matches Categories section\n6. Test category selection is limited to expense categories only\n7. Verify flash messages display correctly for all operations",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Savings Pools Index Page Implementation",
        "description": "Create a card-based layout for the Savings Pools index page with progress tracking and visual indicators.",
        "details": "1. Create a new savings pools index view at `app/views/savings_pools/index.html.erb`\n2. Implement card-based layout similar to Categories and Budgets:\n```erb\n<div class=\"container mx-auto px-4 py-8\">\n  <div class=\"flex justify-between items-center mb-6\">\n    <h1 class=\"text-2xl font-bold\">Savings Pools</h1>\n    <%= link_to 'New Savings Pool', new_savings_pool_path, class: 'btn-primary' %>\n  </div>\n  \n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n    <% @savings_pools.each do |pool| %>\n      <div class=\"card\">\n        <div class=\"p-6\">\n          <div class=\"flex justify-between items-start\">\n            <h2 class=\"text-xl font-semibold\"><%= pool.name %></h2>\n            <div class=\"dropdown\">\n              <!-- Actions dropdown -->\n            </div>\n          </div>\n          \n          <div class=\"mb-2 flex justify-between mt-4\">\n            <span class=\"text-sm text-gray-600\">Progress</span>\n            <span class=\"text-sm font-medium\"><%= number_to_percentage(pool.progress_percentage, precision: 0) %></span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5\">\n            <div class=\"h-2.5 rounded-full\" style=\"width: <%= pool.progress_percentage %>%; background-color: var(--color-primary);\"></div>\n          </div>\n          \n          <div class=\"mt-4 flex justify-between\">\n            <div>\n              <p class=\"text-sm text-gray-600\">Current</p>\n              <p class=\"font-semibold\"><%= number_to_currency(pool.current_amount) %></p>\n            </div>\n            <div class=\"text-right\">\n              <p class=\"text-sm text-gray-600\">Target</p>\n              <p class=\"font-semibold\"><%= number_to_currency(pool.target_amount) %></p>\n            </div>\n          </div>\n          \n          <% if pool.categories.any? %>\n            <div class=\"mt-4\">\n              <p class=\"text-sm text-gray-600 mb-2\">Contributing Categories</p>\n              <div class=\"flex flex-wrap gap-2\">\n                <% pool.categories.each do |category| %>\n                  <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-light text-primary-dark\">\n                    <%= category.name %>\n                  </span>\n                <% end %>\n              </div>\n            </div>\n          <% end %>\n        </div>\n      </div>\n    <% end %>\n    \n    <% if @savings_pools.empty? %>\n      <div class=\"col-span-full\">\n        <%= render 'shared/empty_state', \n          title: 'No savings pools yet', \n          description: 'Create your first savings pool to start tracking your savings goals.',\n          action_text: 'Create Savings Pool',\n          action_path: new_savings_pool_path %>\n      </div>\n    <% end %>\n  </div>\n</div>\n```\n3. Implement progress bars using brand colors from custom.css\n4. Display associated categories as tags\n5. Update SavingsPoolsController to load all necessary data\n6. Add search functionality for savings pools by name",
        "testStrategy": "1. Verify card layout matches established design patterns\n2. Test progress visualization with various completion percentages\n3. Verify empty state displays correctly when no savings pools exist\n4. Test category association display\n5. Verify search functionality works correctly\n6. Test responsive behavior on mobile devices\n7. Verify all brand colors are applied correctly from custom.css",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Savings Pools CRUD Operations Implementation",
        "description": "Implement complete CRUD operations for Savings Pools with forms that match the design patterns established in the Categories section.",
        "details": "1. Create new savings pool form at `app/views/savings_pools/new.html.erb`\n2. Create edit savings pool form at `app/views/savings_pools/edit.html.erb`\n3. Create a shared form partial at `app/views/savings_pools/_form.html.erb`\n4. Implement SimpleForm integration with brand-colored focus states:\n```erb\n<%= simple_form_for @savings_pool do |f| %>\n  <div class=\"card mb-6\">\n    <div class=\"p-6\">\n      <h2 class=\"text-xl font-semibold mb-4\"><%= form_title %></h2>\n      \n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div class=\"col-span-full\">\n          <%= f.input :name, \n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div>\n          <%= f.input :target_amount, \n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div>\n          <%= f.input :target_date, \n            as: :date, \n            html5: true,\n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div class=\"col-span-full\">\n          <%= f.association :categories, \n            collection: Category.savings, \n            label_method: :name, \n            value_method: :id, \n            input_html: { class: 'form-select', multiple: true },\n            hint: 'Select categories that contribute to this savings pool' %>\n        </div>\n        \n        <div class=\"col-span-full\">\n          <%= f.input :description, \n            input_html: { class: 'form-textarea', rows: 3 },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"flex justify-end space-x-4\">\n    <%= link_to 'Cancel', savings_pools_path, class: 'btn-secondary' %>\n    <%= f.button :submit, class: 'btn-primary' %>\n  </div>\n<% end %>\n```\n5. Create savings pool show view at `app/views/savings_pools/show.html.erb`\n6. Implement delete confirmation modal using Stimulus.js\n7. Update SavingsPoolsController with all CRUD actions\n8. Add validations to SavingsPool model\n9. Implement flash messages for successful/failed operations",
        "testStrategy": "1. Test creating a new savings pool with valid data\n2. Test validation errors display correctly\n3. Test editing an existing savings pool\n4. Test deleting a savings pool with confirmation\n5. Verify form styling matches Categories section\n6. Test category selection is limited to savings categories only\n7. Verify flash messages display correctly for all operations\n8. Test multiple category selection functionality",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Item Management Integration in Categories",
        "description": "Enhance the Categories section with integrated Item management, allowing users to manage items directly from category show pages.",
        "details": "1. Update the category show view at `app/views/categories/show.html.erb`\n2. Add a section for items management within the category context:\n```erb\n<div class=\"container mx-auto px-4 py-8\">\n  <div class=\"flex items-center mb-6\">\n    <nav class=\"text-sm breadcrumbs\">\n      <ol class=\"flex space-x-2\">\n        <li><%= link_to 'Categories', categories_path, class: 'text-gray-500 hover:text-gray-700' %></li>\n        <li class=\"flex items-center\">\n          <svg class=\"h-5 w-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\n          </svg>\n          <span class=\"ml-2 text-gray-900\"><%= @category.name %></span>\n        </li>\n      </ol>\n    </nav>\n  </div>\n  \n  <div class=\"card mb-6\">\n    <div class=\"p-6\">\n      <div class=\"flex justify-between items-start\">\n        <h1 class=\"text-2xl font-bold\"><%= @category.name %></h1>\n        <div class=\"dropdown\">\n          <!-- Actions dropdown -->\n        </div>\n      </div>\n      <p class=\"text-gray-600 mt-2\"><%= @category.description %></p>\n      \n      <!-- Category details -->\n    </div>\n  </div>\n  \n  <div class=\"card\">\n    <div class=\"p-6\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <h2 class=\"text-xl font-semibold\">Items</h2>\n        <%= link_to 'Add Item', new_category_item_path(@category), class: 'btn-primary text-sm', data: { turbo_frame: 'new_item_form' } %>\n      </div>\n      \n      <turbo-frame id=\"new_item_form\"></turbo-frame>\n      \n      <div class=\"mt-4\">\n        <turbo-frame id=\"items_list\">\n          <% if @items.any? %>\n            <div class=\"overflow-x-auto\">\n              <table class=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Description</th>\n                    <th class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody class=\"bg-white divide-y divide-gray-200\">\n                  <% @items.each do |item| %>\n                    <tr id=\"<%= dom_id(item) %>\" class=\"hover:bg-gray-50\">\n                      <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\"><%= item.name %></td>\n                      <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><%= item.description %></td>\n                      <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <%= link_to 'Edit', edit_category_item_path(@category, item), class: 'text-primary-dark hover:text-primary mr-3', data: { turbo_frame: 'item_form' } %>\n                        <%= link_to 'Delete', category_item_path(@category, item), method: :delete, data: { confirm: 'Are you sure?' }, class: 'text-red-600 hover:text-red-900' %>\n                      </td>\n                    </tr>\n                  <% end %>\n                </tbody>\n              </table>\n            </div>\n          <% else %>\n            <div class=\"text-center py-8\">\n              <p class=\"text-gray-500\">No items in this category yet.</p>\n            </div>\n          <% end %>\n        </turbo-frame>\n      </div>\n    </div>\n  </div>\n</div>\n```\n3. Create new item form at `app/views/items/new.html.erb` with Turbo Frame support\n4. Create edit item form at `app/views/items/edit.html.erb` with Turbo Frame support\n5. Create a shared form partial at `app/views/items/_form.html.erb`\n6. Update ItemsController to handle Turbo Frame requests\n7. Implement inline editing using Turbo Frames\n8. Add proper routes for nested resources (categories/items)",
        "testStrategy": "1. Test adding a new item to a category directly from the category show page\n2. Test inline editing of items without leaving the category context\n3. Test deleting items with confirmation\n4. Verify Turbo Frame functionality works correctly\n5. Test form validation and error handling\n6. Verify styling matches established patterns\n7. Test responsive behavior on mobile devices",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Standardized Page Headers Component",
        "description": "Create a standardized page header component with breadcrumbs, search, and action buttons that can be reused across all sections.",
        "details": "1. Create a shared partial at `app/views/shared/_page_header.html.erb`:\n```erb\n<div class=\"flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4\">\n  <div>\n    <% if local_assigns[:breadcrumbs].present? %>\n      <nav class=\"text-sm breadcrumbs mb-2\">\n        <ol class=\"flex flex-wrap space-x-2\">\n          <% breadcrumbs.each_with_index do |crumb, index| %>\n            <li class=\"flex items-center\">\n              <% if index > 0 %>\n                <svg class=\"h-5 w-5 text-gray-400 mx-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\n                </svg>\n              <% end %>\n              \n              <% if crumb[:url].present? && index < breadcrumbs.size - 1 %>\n                <%= link_to crumb[:label], crumb[:url], class: 'text-gray-500 hover:text-gray-700' %>\n              <% else %>\n                <span class=\"text-gray-900\"><%= crumb[:label] %></span>\n              <% end %>\n            </li>\n          <% end %>\n        </ol>\n      </nav>\n    <% end %>\n    \n    <h1 class=\"text-2xl font-bold\"><%= title %></h1>\n    <% if local_assigns[:subtitle].present? %>\n      <p class=\"text-gray-600 mt-1\"><%= subtitle %></p>\n    <% end %>\n  </div>\n  \n  <div class=\"flex flex-col sm:flex-row gap-3 mt-4 md:mt-0\">\n    <% if local_assigns[:search].present? && search == true %>\n      <div class=\"relative\">\n        <input type=\"text\" \n               placeholder=\"Search...\"\n               class=\"form-input pl-10\"\n               data-controller=\"search\"\n               data-action=\"input->search#debounce\"\n               data-search-url-value=\"<%= local_assigns[:search_url] %>\">\n        <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <svg class=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n          </svg>\n        </div>\n      </div>\n    <% end %>\n    \n    <% if local_assigns[:actions].present? %>\n      <div class=\"flex space-x-3\">\n        <% actions.each do |action| %>\n          <%= link_to action[:label], action[:url], class: action[:class] || 'btn-primary' %>\n        <% end %>\n      </div>\n    <% end %>\n  </div>\n</div>\n```\n2. Create a Stimulus controller for search functionality at `app/javascript/controllers/search_controller.js`:\n```javascript\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static values = { url: String }\n  \n  connect() {\n    this.timeout = null\n  }\n  \n  debounce(event) {\n    clearTimeout(this.timeout)\n    this.timeout = setTimeout(() => {\n      this.performSearch(event.target.value)\n    }, 300)\n  }\n  \n  performSearch(query) {\n    const url = new URL(this.urlValue, window.location.origin)\n    url.searchParams.set('query', query)\n    \n    fetch(url, {\n      headers: {\n        'Accept': 'text/vnd.turbo-stream.html'\n      }\n    })\n    .then(response => response.text())\n    .then(html => {\n      Turbo.renderStreamMessage(html)\n    })\n  }\n}\n```\n3. Update all views to use the standardized page header component\n4. Ensure consistent styling across all sections\n5. Add appropriate breadcrumbs for each section",
        "testStrategy": "1. Verify page header displays correctly across all sections\n2. Test breadcrumbs navigation functionality\n3. Test search functionality with debounced input\n4. Verify action buttons work correctly\n5. Test responsive behavior on mobile devices\n6. Verify styling is consistent with design patterns",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Standardized Card Component",
        "description": "Create a standardized card component that can be reused across all sections with consistent styling.",
        "details": "1. Create a shared partial at `app/views/shared/_card.html.erb`:\n```erb\n<div class=\"bg-white shadow-sm rounded-lg border border-gray-100 <%= local_assigns[:class] %>\">\n  <% if local_assigns[:header].present? %>\n    <div class=\"px-6 py-4 border-b border-gray-100\">\n      <% if local_assigns[:header_content] %>\n        <%= header_content %>\n      <% else %>\n        <div class=\"flex justify-between items-center\">\n          <h2 class=\"text-xl font-semibold\"><%= header %></h2>\n          \n          <% if local_assigns[:actions].present? %>\n            <div class=\"flex space-x-2\">\n              <% actions.each do |action| %>\n                <%= link_to action[:label], action[:url], class: action[:class] || 'btn-sm btn-secondary' %>\n              <% end %>\n            </div>\n          <% end %>\n        </div>\n      <% end %>\n    </div>\n  <% end %>\n  \n  <div class=\"p-6\">\n    <%= content %>\n  </div>\n  \n  <% if local_assigns[:footer].present? %>\n    <div class=\"px-6 py-4 border-t border-gray-100 bg-gray-50 rounded-b-lg\">\n      <%= footer %>\n    </div>\n  <% end %>\n</div>\n```\n2. Update CSS to ensure consistent card styling:\n```css\n/* Add to app/assets/stylesheets/custom.css */\n.card {\n  @apply bg-white shadow-sm rounded-lg border border-gray-100;\n}\n\n.card-header {\n  @apply px-6 py-4 border-b border-gray-100;\n}\n\n.card-body {\n  @apply p-6;\n}\n\n.card-footer {\n  @apply px-6 py-4 border-t border-gray-100 bg-gray-50 rounded-b-lg;\n}\n```\n3. Update all views to use the standardized card component\n4. Ensure consistent styling across all sections",
        "testStrategy": "1. Verify card component displays correctly across all sections\n2. Test different card configurations (with/without header, footer)\n3. Verify styling is consistent with design patterns\n4. Test responsive behavior on mobile devices\n5. Verify all brand colors are applied correctly from custom.css",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Standardized Form Components",
        "description": "Create standardized form components with SimpleForm integration and brand-colored focus states.",
        "details": "1. Configure SimpleForm to use custom styling:\n```ruby\n# config/initializers/simple_form.rb\nSimpleForm.setup do |config|\n  config.wrappers :default, class: 'form-group' do |b|\n    b.use :html5\n    b.use :placeholder\n    b.use :label, class: 'form-label'\n    b.use :input, class: 'form-input', error_class: 'border-red-500'\n    b.use :error, wrap_with: { tag: :p, class: 'mt-1 text-sm text-red-600' }\n    b.use :hint, wrap_with: { tag: :p, class: 'mt-1 text-sm text-gray-500' }\n  end\nend\n```\n2. Add custom form styles to `app/assets/stylesheets/custom.css`:\n```css\n/* Form styles */\n.form-group {\n  @apply mb-4;\n}\n\n.form-label {\n  @apply block text-sm font-medium text-gray-700 mb-1;\n}\n\n.form-input {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50;\n}\n\n.form-select {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50;\n}\n\n.form-checkbox {\n  @apply rounded border-gray-300 text-primary focus:ring-primary;\n}\n\n.form-radio {\n  @apply border-gray-300 text-primary focus:ring-primary;\n}\n\n.form-textarea {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50;\n}\n```\n3. Create a shared form layout partial at `app/views/shared/_form_layout.html.erb`:\n```erb\n<div class=\"card mb-6\">\n  <div class=\"p-6\">\n    <h2 class=\"text-xl font-semibold mb-4\"><%= title %></h2>\n    <%= form_content %>\n  </div>\n</div>\n\n<div class=\"flex justify-end space-x-4\">\n  <%= link_to 'Cancel', cancel_path, class: 'btn-secondary' %>\n  <%= submit_button %>\n</div>\n```\n4. Update all form views to use the standardized form components\n5. Ensure consistent styling across all forms",
        "testStrategy": "1. Verify form components display correctly across all sections\n2. Test form validation and error display\n3. Verify focus states use brand colors from custom.css\n4. Test different input types (text, select, checkbox, etc.)\n5. Verify responsive behavior on mobile devices\n6. Test form submission and error handling",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Standardized Table Component",
        "description": "Create a standardized table component with responsive design, proper spacing, and hover states.",
        "details": "1. Create a shared partial at `app/views/shared/_table.html.erb`:\n```erb\n<div class=\"overflow-x-auto\">\n  <table class=\"min-w-full divide-y divide-gray-200\">\n    <thead>\n      <tr>\n        <% columns.each do |column| %>\n          <th class=\"<%= column[:class] || 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider' %>\">\n            <% if column[:sortable] %>\n              <%= link_to column[:label], column[:sort_url], class: 'flex items-center group', data: { turbo_action: 'advance' } %>\n              <% if column[:sort_direction] %>\n                <svg class=\"ml-1 h-4 w-4 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <% if column[:sort_direction] == 'asc' %>\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 15l7-7 7 7\" />\n                  <% else %>\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\" />\n                  <% end %>\n                </svg>\n              <% else %>\n                <svg class=\"ml-1 h-4 w-4 text-gray-400 opacity-0 group-hover:opacity-100\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 15l7-7 7 7\" />\n                </svg>\n              <% end %>\n            <% else %>\n              <%= column[:label] %>\n            <% end %>\n          </th>\n        <% end %>\n      </tr>\n    </thead>\n    <tbody class=\"bg-white divide-y divide-gray-200\">\n      <% if items.any? %>\n        <% items.each do |item| %>\n          <tr id=\"<%= dom_id(item) if defined?(dom_id) %>\" class=\"hover:bg-gray-50\">\n            <%= yield item %>\n          </tr>\n        <% end %>\n      <% else %>\n        <tr>\n          <td colspan=\"<%= columns.size %>\" class=\"px-6 py-10 text-center text-gray-500\">\n            <%= empty_message || 'No items found' %>\n          </td>\n        </tr>\n      <% end %>\n    </tbody>\n  </table>\n</div>\n\n<% if defined?(pagy) && pagy.pages > 1 %>\n  <div class=\"mt-4 flex justify-between items-center\">\n    <p class=\"text-sm text-gray-700\">\n      Showing <span class=\"font-medium\"><%= pagy.from %></span> to <span class=\"font-medium\"><%= pagy.to %></span> of <span class=\"font-medium\"><%= pagy.count %></span> results\n    </p>\n    <%== pagy_nav(pagy) %>\n  </div>\n<% end %>\n```\n2. Add custom table styles to `app/assets/stylesheets/custom.css`:\n```css\n/* Table styles */\n.table-container {\n  @apply overflow-x-auto;\n}\n\n.table {\n  @apply min-w-full divide-y divide-gray-200;\n}\n\n.table-header {\n  @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;\n}\n\n.table-cell {\n  @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;\n}\n\n.table-cell-actions {\n  @apply px-6 py-4 whitespace-nowrap text-right text-sm font-medium;\n}\n```\n3. Create a Stimulus controller for sortable tables at `app/javascript/controllers/sortable_table_controller.js`\n4. Update all table views to use the standardized table component\n5. Ensure consistent styling across all tables",
        "testStrategy": "1. Verify table component displays correctly across all sections\n2. Test sortable columns functionality\n3. Test empty state display\n4. Verify pagination works correctly\n5. Test responsive behavior on mobile devices\n6. Verify hover states work correctly\n7. Test with various data sets to ensure proper rendering",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Standardized Button Components",
        "description": "Create standardized button components with primary, secondary, and danger variants using brand colors.",
        "details": "1. Add custom button styles to `app/assets/stylesheets/custom.css`:\n```css\n/* Button styles */\n.btn {\n  @apply inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;\n}\n\n.btn-primary {\n  @apply btn bg-gradient-to-r from-primary to-primary-dark text-white hover:from-primary-dark hover:to-primary-dark focus:ring-primary;\n}\n\n.btn-secondary {\n  @apply btn bg-white border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500;\n}\n\n.btn-danger {\n  @apply btn bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;\n}\n\n.btn-success {\n  @apply btn bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;\n}\n\n.btn-sm {\n  @apply px-3 py-1.5 text-xs;\n}\n\n.btn-lg {\n  @apply px-6 py-3 text-base;\n}\n\n.btn-icon {\n  @apply p-2;\n}\n```\n2. Create a shared button component at `app/helpers/button_helper.rb`:\n```ruby\nmodule ButtonHelper\n  def button_tag(content = nil, options = nil, &block)\n    options ||= {}\n    options[:class] = class_names(options[:class], 'btn')\n    \n    if options[:variant].present?\n      options[:class] = class_names(options[:class], \"btn-#{options[:variant]}\")\n      options.delete(:variant)\n    end\n    \n    if options[:size].present?\n      options[:class] = class_names(options[:class], \"btn-#{options[:size]}\")\n      options.delete(:size)\n    end\n    \n    super(content, options, &block)\n  end\n  \n  def link_button_to(name = nil, options = nil, html_options = nil, &block)\n    html_options ||= {}\n    html_options[:class] = class_names(html_options[:class], 'btn')\n    \n    if html_options[:variant].present?\n      html_options[:class] = class_names(html_options[:class], \"btn-#{html_options[:variant]}\")\n      html_options.delete(:variant)\n    end\n    \n    if html_options[:size].present?\n      html_options[:class] = class_names(html_options[:class], \"btn-#{html_options[:size]}\")\n      html_options.delete(:size)\n    end\n    \n    link_to(name, options, html_options, &block)\n  end\nend\n```\n3. Update all views to use the standardized button components\n4. Ensure consistent styling across all buttons",
        "testStrategy": "1. Verify button components display correctly across all sections\n2. Test different button variants (primary, secondary, danger)\n3. Test different button sizes (default, sm, lg)\n4. Verify hover and focus states work correctly\n5. Test button helpers in various contexts\n6. Verify all brand colors are applied correctly from custom.css",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Empty State Component Implementation",
        "description": "Create a standardized empty state component with branded messaging and call-to-action buttons.",
        "details": "1. Create a shared partial at `app/views/shared/_empty_state.html.erb`:\n```erb\n<div class=\"text-center py-12\">\n  <% if local_assigns[:icon].present? %>\n    <div class=\"mx-auto h-12 w-12 text-gray-400\">\n      <%= icon %>\n    </div>\n  <% else %>\n    <svg class=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\" />\n    </svg>\n  <% end %>\n  \n  <h3 class=\"mt-4 text-lg font-medium text-gray-900\"><%= title %></h3>\n  <p class=\"mt-1 text-sm text-gray-500\"><%= description %></p>\n  \n  <% if local_assigns[:action_text].present? && local_assigns[:action_path].present? %>\n    <div class=\"mt-6\">\n      <%= link_to action_text, action_path, class: 'btn-primary' %>\n    </div>\n  <% end %>\n</div>\n```\n2. Create a set of standard empty state icons for different contexts (categories, budgets, entries, etc.)\n3. Update all views to use the standardized empty state component\n4. Ensure consistent styling across all empty states",
        "testStrategy": "1. Verify empty state component displays correctly across all sections\n2. Test with and without custom icons\n3. Test with and without action buttons\n4. Verify styling is consistent with design patterns\n5. Test responsive behavior on mobile devices",
        "priority": "medium",
        "dependencies": [
          1,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Mobile Responsiveness Implementation",
        "description": "Ensure all new interfaces work well on mobile devices with appropriate responsive design patterns.",
        "details": "1. Review all new components and views for mobile responsiveness\n2. Implement responsive design patterns for each component:\n   - **Navigation**: Collapsible sidebar on mobile\n   - **Tables**: Horizontal scrolling on small screens\n   - **Cards**: Single column layout on mobile\n   - **Forms**: Full-width inputs on mobile\n   - **Buttons**: Appropriate sizing and spacing on mobile\n3. Add responsive utility classes to `app/assets/stylesheets/custom.css`:\n```css\n/* Responsive utilities */\n@media (max-width: 640px) {\n  .mobile-full-width {\n    width: 100%;\n  }\n  \n  .mobile-stack {\n    flex-direction: column;\n  }\n  \n  .mobile-hidden {\n    display: none;\n  }\n}\n```\n4. Test all views on various screen sizes and devices\n5. Implement responsive navigation using Stimulus.js:\n```javascript\n// app/javascript/controllers/mobile_nav_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [\"sidebar\"]\n  \n  toggle() {\n    this.sidebarTarget.classList.toggle('hidden')\n  }\n  \n  close() {\n    if (window.innerWidth < 768) {\n      this.sidebarTarget.classList.add('hidden')\n    }\n  }\n  \n  // Close sidebar when clicking outside on mobile\n  clickOutside(event) {\n    if (window.innerWidth < 768 && !this.sidebarTarget.contains(event.target) && !this.element.contains(event.target)) {\n      this.sidebarTarget.classList.add('hidden')\n    }\n  }\n}\n```\n6. Update the layout to use the mobile navigation controller",
        "testStrategy": "1. Test all views on various screen sizes (mobile, tablet, desktop)\n2. Verify navigation works correctly on mobile devices\n3. Test tables with horizontal scrolling on small screens\n4. Verify forms are usable on mobile devices\n5. Test touch interactions on mobile devices\n6. Verify all components maintain proper spacing and alignment on mobile",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          5,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Performance Optimization Implementation",
        "description": "Implement performance optimizations for database queries, frontend rendering, and overall application responsiveness.",
        "details": "1. Optimize database queries:\n   - Add proper indexes to relevant tables\n   - Implement eager loading for associations\n   - Use counter caches for frequently accessed counts\n   - Add database-level scopes for common queries\n\n2. Implement frontend performance optimizations:\n   - Use Turbo Drive for navigation\n   - Implement Turbo Frames for partial page updates\n   - Use Stimulus controllers for interactive elements\n   - Optimize CSS with proper specificity\n\n3. Add pagination for large datasets using Pagy gem:\n```ruby\n# Gemfile\ngem 'pagy', '~> 6.0'\n\n# app/controllers/application_controller.rb\ninclude Pagy::Backend\n\n# app/helpers/application_helper.rb\ninclude Pagy::Frontend\n```\n\n4. Implement controller-level optimizations:\n```ruby\n# Example for EntriesController\ndef index\n  @pagy, @entries = pagy(Entry.includes(:category, :item).order(date: :desc), items: 20)\n  @expense_entries = @entries.select { |e| e.category.expense? }\n  @income_entries = @entries.select { |e| e.category.income? }\n  @savings_entries = @entries.select { |e| e.category.savings? }\n  \n  respond_to do |format|\n    format.html\n    format.turbo_stream if params[:query].present?\n  end\nend\n```\n\n5. Add caching for expensive operations:\n```ruby\n# app/models/category.rb\ndef total_amount\n  Rails.cache.fetch([self, 'total_amount']) do\n    entries.sum(:amount)\n  end\nend\n```\n\n6. Optimize asset loading:\n   - Use Webpacker for JavaScript bundling\n   - Implement proper asset precompilation\n   - Use image optimization for any images\n\n7. Implement debounced search inputs using Stimulus.js",
        "testStrategy": "1. Measure page load times before and after optimizations\n2. Test database query performance with large datasets\n3. Verify pagination works correctly with large datasets\n4. Test caching effectiveness for expensive operations\n5. Verify Turbo Drive and Turbo Frames work correctly\n6. Test search performance with debounced inputs\n7. Verify mobile performance is acceptable",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          5,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Database Query Optimization",
            "description": "Implement database-level optimizations to improve query performance and reduce load times.",
            "dependencies": [],
            "details": "1. Add proper indexes to frequently queried columns in transactions, categories, budgets, and savings_pools tables\n2. Implement eager loading for all model associations to prevent N+1 queries\n3. Add counter caches for frequently accessed counts (e.g., transactions_count on categories)\n4. Create database-level scopes for common queries in models\n5. Optimize JOIN operations in complex queries\n6. Acceptance criteria: Query execution time reduced by at least 50% for common operations",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Frontend Performance Improvements",
            "description": "Optimize frontend code and implement Hotwire patterns to improve page load and interaction times.",
            "dependencies": [
              1
            ],
            "details": "1. Implement Turbo Drive for all navigation to avoid full page reloads\n2. Add Turbo Frames for partial page updates in high-interaction areas\n3. Create Stimulus controllers for interactive elements (dropdowns, modals, etc.)\n4. Optimize CSS with proper specificity and reduce unused styles\n5. Implement lazy loading for images and heavy components\n6. Acceptance criteria: Time to interactive reduced by 40%, First Contentful Paint under 1.5s",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Pagination Implementation",
            "description": "Add pagination to all list views to improve performance with large datasets.",
            "dependencies": [
              1
            ],
            "details": "1. Implement Kaminari or will_paginate for server-side pagination\n2. Add pagination to transactions index, budgets index, and savings pools index\n3. Create custom pagination controls that match the application design\n4. Implement infinite scrolling option using Turbo Streams for transaction history\n5. Add proper page caching to maintain state between navigations\n6. Acceptance criteria: Lists load in under 500ms regardless of total record count, pagination controls are accessible",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Caching Implementation",
            "description": "Implement multi-level caching to reduce database load and improve response times.",
            "dependencies": [
              1,
              2
            ],
            "details": "1. Set up fragment caching for partial views and components\n2. Implement Russian Doll caching for nested resources\n3. Add low-level caching for expensive calculations (e.g., budget progress, savings goals)\n4. Configure Redis as the cache store in production environment\n5. Add cache expiration and automatic busting when records are updated\n6. Acceptance criteria: Cache hit rate above 80% for common operations, dashboard loads under 300ms",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Asset Optimization",
            "description": "Optimize static assets to reduce page load times and bandwidth usage.",
            "dependencies": [
              2
            ],
            "details": "1. Configure proper asset compression and minification in production\n2. Implement HTTP/2 for parallel asset loading\n3. Set up CDN integration for static assets\n4. Optimize and compress all images using WebP format\n5. Implement proper cache headers for static assets\n6. Configure critical CSS path for above-the-fold content\n7. Acceptance criteria: PageSpeed Insights score above 90, total page size reduced by 40%",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Performance Testing and Monitoring",
            "description": "Implement comprehensive performance testing and monitoring to ensure optimizations are effective.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "1. Set up performance benchmarks using Rails mini-profiler\n2. Create automated performance tests using Lighthouse CI\n3. Implement real user monitoring (RUM) to track actual user experience\n4. Add server-side monitoring for database query performance\n5. Create performance dashboards to track key metrics over time\n6. Document performance bottlenecks and optimization strategies\n7. Acceptance criteria: Complete test suite that verifies all performance targets are met, monitoring in place for all critical paths",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-14T21:48:01.158Z",
      "updated": "2025-07-14T21:51:01.700Z",
      "description": "Tasks for ui-ux-improvements context"
    }
  },
  "ui-ux-improvements": {
    "tasks": [
      {
        "id": 1,
        "title": "Navigation Consolidation Implementation",
        "description": "Replace separate 'Expenses' and 'Income' sidebar items with a single 'Entries' navigation item that provides tab-based filtering.",
        "details": "1. Update the sidebar navigation in `app/views/shared/_sidebar.html.erb`\n2. Remove existing 'Expenses' and 'Income' items\n3. Add new 'Entries' item with appropriate icon (use heroicons)\n4. Create a new controller action in EntriesController to handle the unified view\n5. Implement tab-based filtering using Stimulus.js controller:\n```javascript\n// app/javascript/controllers/tab_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [\"tab\", \"panel\"]\n  \n  connect() {\n    this.showTab(this.tabTargets[0].dataset.tabId || \"all\")\n  }\n  \n  switch(event) {\n    event.preventDefault()\n    this.showTab(event.currentTarget.dataset.tabId)\n  }\n  \n  showTab(id) {\n    this.tabTargets.forEach(tab => {\n      tab.classList.toggle(\"active\", tab.dataset.tabId === id)\n    })\n    \n    this.panelTargets.forEach(panel => {\n      panel.classList.toggle(\"hidden\", panel.dataset.panelId !== id)\n    })\n  }\n}\n```\n6. Style active tab state using brand colors from custom.css\n7. Ensure the active navigation item is highlighted correctly",
        "testStrategy": "1. Verify sidebar navigation displays single 'Entries' item\n2. Test tab-based filtering for Expenses, Income, and Savings\n3. Confirm active states are styled correctly using brand colors\n4. Test navigation on mobile devices to ensure responsive behavior\n5. Verify correct routes are generated when clicking navigation items",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Entries Management Table Interface",
        "description": "Create a professional table-based interface for entries management with filtering, sorting, and actions following the Categories items_list pattern.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "1. Create a new entries index view at `app/views/entries/index.html.erb` (COMPLETED)\n2. Implement responsive table structure following Categories pattern (COMPLETED)\n3. Create a partial for the entries table at `app/views/entries/_entries_table.html.erb` (COMPLETED)\n4. Implement simplified sorting for amount and date columns only (asc/desc) (COMPLETED)\n5. Add search functionality with dropdown selector (date, item, description, category)\n6. Extract controller logic into methods/concerns for better organization\n7. Create a reusable search concern for multiple controllers/models\n8. Implement pagination using Pagy gem (version 6.0+)\n9. Style table with consistent hover states and spacing\n10. Add edit and delete actions with appropriate styling\n11. Use SimpleForm with onchange submit for search functionality",
        "testStrategy": "1. Test table rendering with various data sets\n2. Verify filtering works correctly between All, Expenses, Income, and Savings\n3. Test simplified sorting functionality for amount and date columns\n4. Verify search functionality works with dropdown selector for different fields\n5. Test pagination with large datasets\n6. Verify edit and delete actions function correctly\n7. Test responsive behavior on mobile devices\n8. Verify reusable search concern works across different controllers\n9. Test SimpleForm onchange submit behavior",
        "subtasks": [
          {
            "id": 1,
            "title": "Basic table interface implementation",
            "description": "Core table structure and tab-based filtering already implemented during Task 1.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Extract table partial",
            "description": "Create `_entries_table.html.erb` partial for better organization and reusability across tab panels.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement sortable columns",
            "description": "Create a Stimulus.js controller for sorting entries by Date, Amount, Category, and other relevant columns. Add appropriate sort indicators and toggle functionality.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement simplified search with dropdown selector",
            "description": "Create a search form with a dropdown selector for different fields (date, item, description, category) using SimpleForm with onchange submit behavior.",
            "status": "done",
            "dependencies": [],
            "details": "1. Create a SimpleForm search form in the entries index view\n2. Add a dropdown selector for search field options\n3. Configure the form to submit on change\n4. Style the form to match the overall design",
            "testStrategy": "1. Test search functionality with each dropdown option\n2. Verify onchange submit behavior works correctly\n3. Test with various search terms and edge cases"
          },
          {
            "id": 5,
            "title": "Extract controller logic into concerns",
            "description": "Create a reusable search concern that can be used across multiple controllers and models for consistent search functionality.",
            "status": "done",
            "dependencies": [],
            "details": "1. Create a `Searchable` concern in `app/controllers/concerns/`\n2. Extract search logic from EntriesController into the concern\n3. Make the concern flexible enough to work with different models and search fields\n4. Update EntriesController to include the concern",
            "testStrategy": "1. Test the concern with EntriesController\n2. Verify search functionality works correctly\n3. Test with different search parameters and edge cases"
          },
          {
            "id": 6,
            "title": "Implement pagination",
            "description": "Add Pagy gem for pagination support with large datasets. Update the EntriesController to handle pagination parameters and integrate pagination UI in the view.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Enhance table styling",
            "description": "Improve hover states, spacing, and visual consistency of the table. Ensure proper alignment of columns and responsive behavior.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Update sorting implementation",
            "description": "Simplify the existing sorting implementation to only support amount and date columns (asc/desc) based on user feedback.",
            "status": "done",
            "dependencies": [
              3
            ],
            "details": "1. Modify the existing sorting controller to only handle amount and date columns\n2. Update the UI to only show sort indicators for these columns\n3. Ensure toggle between ascending and descending works correctly\n4. Remove sorting functionality from other columns",
            "testStrategy": "1. Test sorting by amount (ascending and descending)\n2. Test sorting by date (ascending and descending)\n3. Verify other columns no longer show sort indicators\n4. Test interaction between sorting and search functionality"
          },
          {
            "id": 9,
            "title": "Final Implementation Summary & Documentation",
            "description": "Document all additional enhancements and refactoring completed beyond original scope",
            "details": "## COMPLETE IMPLEMENTATION SUMMARY\n\nWe significantly exceeded the original scope for Task 2 with extensive refactoring and UX improvements:\n\n### Searchable System Architecture\n- **Naming Conflict Resolution**: Resolved conflicts between model and controller concerns by renaming model concern to `ModelSearchable` and keeping controller concern as `Searchable`\n- **Comprehensive Documentation**: Created `docs/searchable-system-reference.md` with complete system documentation for future reference\n- **Helper Organization**: Moved search-specific helpers from ApplicationHelper to dedicated `SearchHelper` for better separation of concerns\n\n### Professional UX Improvements  \n- **Search Bar Styling**: Completely redesigned search bar to match the beautiful categories page design with integrated dropdown and search input\n- **Form Utility Cleanup**: Removed `.form-input` utility class from custom.css and hardcoded all form styles for better maintainability\n- **Currency Display**: Converted entry amounts to use Rails `number_to_currency` helper for proper currency formatting\n- **Stimulus Controller**: Created proper `shared/search_placeholder_controller.js` to replace inline JavaScript\n\n### Code Organization & Refactoring\n- **Entry Partial Extraction**: Refactored table by extracting individual entry rows into `_entry.html.erb` partial\n- **File Naming**: Renamed `_entries_table.html.erb` to `_table.html.erb` for cleaner organization since it's already in entries folder\n- **Hardcoding Elimination**: Replaced repetitive case statements with centralized `entry_type_config` helper\n- **Auto-Submit Fix**: Resolved dropdown auto-submit issues that were causing unwanted page reloads\n\n### Technical Debt Cleanup\n- **Server-Side Sorting**: Simplified complex JavaScript sorting to clean server-side implementation\n- **Rails Conventions**: Ensured all code follows proper Rails conventions and patterns\n- **Maintainable Architecture**: Created reusable, well-documented components following DRY principles\n\n### Files Created/Modified:\n**Created**: `app/models/concerns/model_searchable.rb`, `docs/searchable-system-reference.md`, `app/helpers/search_helper.rb`, `app/views/entries/_header.html.erb`, `app/javascript/controllers/shared/search_placeholder_controller.js`, `app/views/entries/_entry.html.erb`\n\n**Modified**: `app/models/entry.rb`, `app/controllers/entries_controller.rb`, `app/helpers/application_helper.rb`, `app/views/entries/index.html.erb`, `app/views/entries/_table.html.erb`, `app/assets/stylesheets/custom.css`\n\n**Deleted**: `app/javascript/controllers/sort_controller.js`, `app/models/concerns/searchable.rb`, `app/views/entries/_entries_table.html.erb`",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Budgets Index Page Implementation",
        "description": "Simplify budget implementation to focus on forms and category integration rather than a separate index page.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "1. Remove the redundant budgets index page implementation as budget management is already well-integrated into the category system\n2. Update category cards to properly handle missing budgets:\n   - Show \"N/A\" instead of \"$0\" when no budget exists\n   - Show \"No budget set\" instead of \"Well under budget\" when no budget exists\n3. Update category card logic to handle missing budget gracefully\n4. Create budget new/edit forms only:\n   - Implement new budget form at `app/views/budgets/new.html.erb`\n   - Implement edit budget form at `app/views/budgets/edit.html.erb`\n   - Create a shared form partial at `app/views/budgets/_form.html.erb`\n5. Ensure forms match the design patterns established in the Categories section\n6. Style progress bars using brand colors from custom.css",
        "testStrategy": "1. Test creating a new budget with valid data\n2. Test validation errors display correctly\n3. Test editing an existing budget\n4. Verify form styling matches Categories section\n5. Test category selection is limited to expense categories only\n6. Verify category cards display correctly when no budget exists\n7. Test responsive behavior on mobile devices\n8. Verify all brand colors are applied correctly from custom.css",
        "subtasks": [
          {
            "id": 1,
            "title": "",
            "description": "Update category card to handle missing budgets",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-20T21:17:58.888Z>\nUpdated category card budget display in app/views/categories/_partials/_category_card.html.erb\n\nKey changes made:\n- Changed budget amount display from \"$X / $0\" to \"$X / N/A\" when no budget exists\n- Added conditional logic to handle missing budgets gracefully  \n- When no budget exists: shows gray progress bar with \"No budget set\" and \"Set budget to track\" messages\n- When budget exists: shows normal progress bar with percentage and status using existing helpers\n- Maintains all existing styling and status color logic for budgets that do exist\n\nThis provides much better UX by clearly indicating when a budget needs to be set rather than showing confusing $0 amounts.\n</info added on 2025-07-20T21:17:58.888Z>",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "",
            "description": "Show \"N/A\" instead of \"$0\" when no budget exists",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "",
            "description": "Show \"No budget set\" instead of \"Well under budget\" when no budget exists",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "",
            "description": "Create new budget form at app/views/budgets/new.html.erb",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-20T21:18:15.833Z>\n✅ COMPLETED: Created comprehensive budget form system\n\nFiles created:\n- app/views/budgets/_form.html.erb: Shared form partial with SimpleForm integration\n- app/views/budgets/new.html.erb: New budget page using form partial\n- app/views/budgets/edit.html.erb: Edit budget page using form partial\n\nKey features implemented:\n- Matches Categories design patterns with standardized page header\n- Responsive form layout with proper spacing and styling\n- Brand color focus states on all form inputs\n- Smart category selection (only expense categories, disabled for editing)\n- Proper validation with hints and error handling\n- Consistent button styling matching site design\n- Currency input with proper step and min validation\n- Period selection with user-friendly labels\n- Cancel button that navigates back to appropriate context\n\nThe forms are fully functional and ready for use with the existing BudgetsController.\n</info added on 2025-07-20T21:18:15.833Z>",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "",
            "description": "Create edit budget form at app/views/budgets/edit.html.erb",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "",
            "description": "Create shared form partial at app/views/budgets/_form.html.erb",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-20T21:21:50.770Z>\n🐛 FIXED: SimpleForm money field error resolved\n\n**Issue**: SimpleForm was showing \"No input found for money\" error because it didn't know how to handle the Budget model's money-type amount field automatically.\n\n**Solution**: Added `as: :decimal` to the amount input in the budget form to explicitly tell SimpleForm how to handle the money field:\n\n```erb\n<%= f.input :amount,\n    as: :decimal,  # ← This fixes the issue\n    label: \"Budget Amount\",\n    # ... rest of the configuration\n```\n\n**Root Cause**: Other forms in the codebase (entries, savings_pools) use regular Rails form helpers (`form.text_field :amount`) for money fields, but I was using SimpleForm without specifying the input type.\n\n**Result**: Budget forms should now work correctly with proper money field handling, matching the patterns used elsewhere in the codebase.\n</info added on 2025-07-20T21:21:50.770Z>",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "",
            "description": "Ensure budget forms match Categories design patterns",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-20T21:18:29.452Z>\n✅ COMPLETED: Updated budget card navigation and styling integration\n\nUpdated app/views/categories/_partials/show/_budget_card.html.erb:\n- Enhanced \"Update Budget\" button styling to match standardized design system  \n- Enhanced \"Create Budget\" button styling for consistency\n- Both buttons now use proper focus states with brand color ring\n- Maintained existing logic for budget vs no-budget states\n- All navigation flows work correctly between category show and budget forms\n\nIntegration features:\n- Budget management is seamlessly integrated into category workflow\n- No separate budget index needed - everything accessible from category context\n- Consistent button styling across all budget-related actions\n- Proper focus accessibility with brand color focus rings\n- Clean user flow: Category → Budget Form → Category\n</info added on 2025-07-20T21:18:29.452Z>",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Budget CRUD Operations Implementation",
        "description": "Implement complete CRUD operations for Budgets with forms that match the design patterns established in the Categories section.",
        "details": "1. Create new budget form at `app/views/budgets/new.html.erb`\n2. Create edit budget form at `app/views/budgets/edit.html.erb`\n3. Create a shared form partial at `app/views/budgets/_form.html.erb`\n4. Implement SimpleForm integration with brand-colored focus states:\n```erb\n<%= simple_form_for @budget do |f| %>\n  <div class=\"card mb-6\">\n    <div class=\"p-6\">\n      <h2 class=\"text-xl font-semibold mb-4\"><%= form_title %></h2>\n      \n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div class=\"col-span-full\">\n          <%= f.association :category, \n            collection: Category.expense, \n            label_method: :name, \n            value_method: :id, \n            include_blank: 'Select a category',\n            input_html: { class: 'form-select' } %>\n        </div>\n        \n        <div>\n          <%= f.input :amount, \n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div>\n          <%= f.input :period, \n            collection: Budget.periods.keys.map { |p| [p.humanize, p] },\n            input_html: { class: 'form-select' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div class=\"col-span-full\">\n          <%= f.input :notes, \n            input_html: { class: 'form-textarea', rows: 3 },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"flex justify-end space-x-4\">\n    <%= link_to 'Cancel', budgets_path, class: 'btn-secondary' %>\n    <%= f.button :submit, class: 'btn-primary' %>\n  </div>\n<% end %>\n```\n5. Create budget show view at `app/views/budgets/show.html.erb`\n6. Implement delete confirmation modal using Stimulus.js\n7. Update BudgetsController with all CRUD actions\n8. Add validations to Budget model\n9. Implement flash messages for successful/failed operations",
        "testStrategy": "1. Test creating a new budget with valid data\n2. Test validation errors display correctly\n3. Test editing an existing budget\n4. Test deleting a budget with confirmation\n5. Verify form styling matches Categories section\n6. Test category selection is limited to expense categories only\n7. Verify flash messages display correctly for all operations",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Savings Pools Index Page Implementation",
        "description": "Create a card-based layout for the Savings Pools index page with progress tracking and visual indicators.",
        "details": "1. Create a new savings pools index view at `app/views/savings_pools/index.html.erb`\n2. Implement card-based layout similar to Categories and Budgets:\n```erb\n<div class=\"container mx-auto px-4 py-8\">\n  <div class=\"flex justify-between items-center mb-6\">\n    <h1 class=\"text-2xl font-bold\">Savings Pools</h1>\n    <%= link_to 'New Savings Pool', new_savings_pool_path, class: 'btn-primary' %>\n  </div>\n  \n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n    <% @savings_pools.each do |pool| %>\n      <div class=\"card\">\n        <div class=\"p-6\">\n          <div class=\"flex justify-between items-start\">\n            <h2 class=\"text-xl font-semibold\"><%= pool.name %></h2>\n            <div class=\"dropdown\">\n              <!-- Actions dropdown -->\n            </div>\n          </div>\n          \n          <div class=\"mb-2 flex justify-between mt-4\">\n            <span class=\"text-sm text-gray-600\">Progress</span>\n            <span class=\"text-sm font-medium\"><%= number_to_percentage(pool.progress_percentage, precision: 0) %></span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5\">\n            <div class=\"h-2.5 rounded-full\" style=\"width: <%= pool.progress_percentage %>%; background-color: var(--color-primary);\"></div>\n          </div>\n          \n          <div class=\"mt-4 flex justify-between\">\n            <div>\n              <p class=\"text-sm text-gray-600\">Current</p>\n              <p class=\"font-semibold\"><%= number_to_currency(pool.current_amount) %></p>\n            </div>\n            <div class=\"text-right\">\n              <p class=\"text-sm text-gray-600\">Target</p>\n              <p class=\"font-semibold\"><%= number_to_currency(pool.target_amount) %></p>\n            </div>\n          </div>\n          \n          <% if pool.categories.any? %>\n            <div class=\"mt-4\">\n              <p class=\"text-sm text-gray-600 mb-2\">Contributing Categories</p>\n              <div class=\"flex flex-wrap gap-2\">\n                <% pool.categories.each do |category| %>\n                  <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-light text-primary-dark\">\n                    <%= category.name %>\n                  </span>\n                <% end %>\n              </div>\n            </div>\n          <% end %>\n        </div>\n      </div>\n    <% end %>\n    \n    <% if @savings_pools.empty? %>\n      <div class=\"col-span-full\">\n        <%= render 'shared/empty_state', \n          title: 'No savings pools yet', \n          description: 'Create your first savings pool to start tracking your savings goals.',\n          action_text: 'Create Savings Pool',\n          action_path: new_savings_pool_path %>\n      </div>\n    <% end %>\n  </div>\n</div>\n```\n3. Implement progress bars using brand colors from custom.css\n4. Display associated categories as tags\n5. Update SavingsPoolsController to load all necessary data\n6. Add search functionality for savings pools by name",
        "testStrategy": "1. Verify card layout matches established design patterns\n2. Test progress visualization with various completion percentages\n3. Verify empty state displays correctly when no savings pools exist\n4. Test category association display\n5. Verify search functionality works correctly\n6. Test responsive behavior on mobile devices\n7. Verify all brand colors are applied correctly from custom.css",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Savings Pools CRUD Operations Implementation",
        "description": "Implement complete CRUD operations for Savings Pools with forms that match the design patterns established in the Categories section.",
        "details": "1. Create new savings pool form at `app/views/savings_pools/new.html.erb`\n2. Create edit savings pool form at `app/views/savings_pools/edit.html.erb`\n3. Create a shared form partial at `app/views/savings_pools/_form.html.erb`\n4. Implement SimpleForm integration with brand-colored focus states:\n```erb\n<%= simple_form_for @savings_pool do |f| %>\n  <div class=\"card mb-6\">\n    <div class=\"p-6\">\n      <h2 class=\"text-xl font-semibold mb-4\"><%= form_title %></h2>\n      \n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div class=\"col-span-full\">\n          <%= f.input :name, \n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div>\n          <%= f.input :target_amount, \n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div>\n          <%= f.input :target_date, \n            as: :date, \n            html5: true,\n            input_html: { class: 'form-input' },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n        \n        <div class=\"col-span-full\">\n          <%= f.association :categories, \n            collection: Category.savings, \n            label_method: :name, \n            value_method: :id, \n            input_html: { class: 'form-select', multiple: true },\n            hint: 'Select categories that contribute to this savings pool' %>\n        </div>\n        \n        <div class=\"col-span-full\">\n          <%= f.input :description, \n            input_html: { class: 'form-textarea', rows: 3 },\n            wrapper_html: { class: 'mb-4' } %>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"flex justify-end space-x-4\">\n    <%= link_to 'Cancel', savings_pools_path, class: 'btn-secondary' %>\n    <%= f.button :submit, class: 'btn-primary' %>\n  </div>\n<% end %>\n```\n5. Create savings pool show view at `app/views/savings_pools/show.html.erb`\n6. Implement delete confirmation modal using Stimulus.js\n7. Update SavingsPoolsController with all CRUD actions\n8. Add validations to SavingsPool model\n9. Implement flash messages for successful/failed operations",
        "testStrategy": "1. Test creating a new savings pool with valid data\n2. Test validation errors display correctly\n3. Test editing an existing savings pool\n4. Test deleting a savings pool with confirmation\n5. Verify form styling matches Categories section\n6. Test category selection is limited to savings categories only\n7. Verify flash messages display correctly for all operations\n8. Test multiple category selection functionality",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Item Management Integration in Categories",
        "description": "Enhance the Categories section with integrated Item management, allowing users to manage items directly from category show pages.",
        "details": "1. Update the category show view at `app/views/categories/show.html.erb`\n2. Add a section for items management within the category context:\n```erb\n<div class=\"container mx-auto px-4 py-8\">\n  <div class=\"flex items-center mb-6\">\n    <nav class=\"text-sm breadcrumbs\">\n      <ol class=\"flex space-x-2\">\n        <li><%= link_to 'Categories', categories_path, class: 'text-gray-500 hover:text-gray-700' %></li>\n        <li class=\"flex items-center\">\n          <svg class=\"h-5 w-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\n          </svg>\n          <span class=\"ml-2 text-gray-900\"><%= @category.name %></span>\n        </li>\n      </ol>\n    </nav>\n  </div>\n  \n  <div class=\"card mb-6\">\n    <div class=\"p-6\">\n      <div class=\"flex justify-between items-start\">\n        <h1 class=\"text-2xl font-bold\"><%= @category.name %></h1>\n        <div class=\"dropdown\">\n          <!-- Actions dropdown -->\n        </div>\n      </div>\n      <p class=\"text-gray-600 mt-2\"><%= @category.description %></p>\n      \n      <!-- Category details -->\n    </div>\n  </div>\n  \n  <div class=\"card\">\n    <div class=\"p-6\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <h2 class=\"text-xl font-semibold\">Items</h2>\n        <%= link_to 'Add Item', new_category_item_path(@category), class: 'btn-primary text-sm', data: { turbo_frame: 'new_item_form' } %>\n      </div>\n      \n      <turbo-frame id=\"new_item_form\"></turbo-frame>\n      \n      <div class=\"mt-4\">\n        <turbo-frame id=\"items_list\">\n          <% if @items.any? %>\n            <div class=\"overflow-x-auto\">\n              <table class=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Description</th>\n                    <th class=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody class=\"bg-white divide-y divide-gray-200\">\n                  <% @items.each do |item| %>\n                    <tr id=\"<%= dom_id(item) %>\" class=\"hover:bg-gray-50\">\n                      <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\"><%= item.name %></td>\n                      <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><%= item.description %></td>\n                      <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <%= link_to 'Edit', edit_category_item_path(@category, item), class: 'text-primary-dark hover:text-primary mr-3', data: { turbo_frame: 'item_form' } %>\n                        <%= link_to 'Delete', category_item_path(@category, item), method: :delete, data: { confirm: 'Are you sure?' }, class: 'text-red-600 hover:text-red-900' %>\n                      </td>\n                    </tr>\n                  <% end %>\n                </tbody>\n              </table>\n            </div>\n          <% else %>\n            <div class=\"text-center py-8\">\n              <p class=\"text-gray-500\">No items in this category yet.</p>\n            </div>\n          <% end %>\n        </turbo-frame>\n      </div>\n    </div>\n  </div>\n</div>\n```\n3. Create new item form at `app/views/items/new.html.erb` with Turbo Frame support\n4. Create edit item form at `app/views/items/edit.html.erb` with Turbo Frame support\n5. Create a shared form partial at `app/views/items/_form.html.erb`\n6. Update ItemsController to handle Turbo Frame requests\n7. Implement inline editing using Turbo Frames\n8. Add proper routes for nested resources (categories/items)",
        "testStrategy": "1. Test adding a new item to a category directly from the category show page\n2. Test inline editing of items without leaving the category context\n3. Test deleting items with confirmation\n4. Verify Turbo Frame functionality works correctly\n5. Test form validation and error handling\n6. Verify styling matches established patterns\n7. Test responsive behavior on mobile devices",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Standardized Page Headers Component",
        "description": "Create a standardized page header component with breadcrumbs, search, and action buttons that can be reused across all sections.",
        "details": "1. Create a shared partial at `app/views/shared/_page_header.html.erb`:\n```erb\n<div class=\"flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4\">\n  <div>\n    <% if local_assigns[:breadcrumbs].present? %>\n      <nav class=\"text-sm breadcrumbs mb-2\">\n        <ol class=\"flex flex-wrap space-x-2\">\n          <% breadcrumbs.each_with_index do |crumb, index| %>\n            <li class=\"flex items-center\">\n              <% if index > 0 %>\n                <svg class=\"h-5 w-5 text-gray-400 mx-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"/>\n                </svg>\n              <% end %>\n              \n              <% if crumb[:url].present? && index < breadcrumbs.size - 1 %>\n                <%= link_to crumb[:label], crumb[:url], class: 'text-gray-500 hover:text-gray-700' %>\n              <% else %>\n                <span class=\"text-gray-900\"><%= crumb[:label] %></span>\n              <% end %>\n            </li>\n          <% end %>\n        </ol>\n      </nav>\n    <% end %>\n    \n    <h1 class=\"text-2xl font-bold\"><%= title %></h1>\n    <% if local_assigns[:subtitle].present? %>\n      <p class=\"text-gray-600 mt-1\"><%= subtitle %></p>\n    <% end %>\n  </div>\n  \n  <div class=\"flex flex-col sm:flex-row gap-3 mt-4 md:mt-0\">\n    <% if local_assigns[:search].present? && search == true %>\n      <div class=\"relative\">\n        <input type=\"text\" \n               placeholder=\"Search...\"\n               class=\"form-input pl-10\"\n               data-controller=\"search\"\n               data-action=\"input->search#debounce\"\n               data-search-url-value=\"<%= local_assigns[:search_url] %>\">\n        <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <svg class=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n          </svg>\n        </div>\n      </div>\n    <% end %>\n    \n    <% if local_assigns[:actions].present? %>\n      <div class=\"flex space-x-3\">\n        <% actions.each do |action| %>\n          <%= link_to action[:label], action[:url], class: action[:class] || 'btn-primary' %>\n        <% end %>\n      </div>\n    <% end %>\n  </div>\n</div>\n```\n2. Create a Stimulus controller for search functionality at `app/javascript/controllers/search_controller.js`:\n```javascript\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static values = { url: String }\n  \n  connect() {\n    this.timeout = null\n  }\n  \n  debounce(event) {\n    clearTimeout(this.timeout)\n    this.timeout = setTimeout(() => {\n      this.performSearch(event.target.value)\n    }, 300)\n  }\n  \n  performSearch(query) {\n    const url = new URL(this.urlValue, window.location.origin)\n    url.searchParams.set('query', query)\n    \n    fetch(url, {\n      headers: {\n        'Accept': 'text/vnd.turbo-stream.html'\n      }\n    })\n    .then(response => response.text())\n    .then(html => {\n      Turbo.renderStreamMessage(html)\n    })\n  }\n}\n```\n3. Update all views to use the standardized page header component\n4. Ensure consistent styling across all sections\n5. Add appropriate breadcrumbs for each section\n<info added on 2025-07-16T00:16:14.719Z>\n6. Added helper methods to `app/helpers/application_helper.rb`:\n```ruby\n# Helper methods for standardized page header\ndef page_header(title, options = {})\n  render 'shared/page_header', {\n    title: title,\n    subtitle: options[:subtitle],\n    breadcrumbs: options[:breadcrumbs],\n    search: options[:search],\n    search_url: options[:search_url],\n    actions: options[:actions]\n  }\nend\n\n# Helper for consistent action buttons\ndef standard_action_button(label, url, options = {})\n  {\n    label: label,\n    url: url,\n    class: options[:class] || options[:secondary] ? 'btn-secondary' : 'btn-primary'\n  }\nend\n\n# Helper for breadcrumb generation\ndef breadcrumb_trail(items)\n  items.map do |item|\n    if item.is_a?(Hash)\n      item\n    else\n      label, url = item.is_a?(Array) ? item : [item, nil]\n      { label: label, url: url }\n    end\n  end\nend\n```\n\n7. Implemented advanced search functionality for entries page with field selectors\n8. Converted existing views to use the standardized header:\n   - Entries page now uses standardized header with advanced search\n   - Categories page now uses standardized header with simple search\n   - Removed old header files (`app/views/entries/_header.html.erb` and `app/views/categories/_partials/_header.html.erb`)\n\n9. Remaining work:\n   - Add standardized headers to remaining pages (dashboard, savings pools, items, etc.)\n   - Implement breadcrumb navigation on detail/show pages\n   - Document usage patterns for future development\n</info added on 2025-07-16T00:16:14.719Z>",
        "testStrategy": "1. Verify page header displays correctly across all sections\n2. Test breadcrumbs navigation functionality\n3. Test search functionality with debounced input\n4. Verify action buttons work correctly\n5. Test responsive behavior on mobile devices\n6. Verify styling is consistent with design patterns",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Standardized Card Component",
        "description": "Create a standardized card component that can be reused across all sections with consistent styling.",
        "details": "1. Create a shared partial at `app/views/shared/_card.html.erb`:\n```erb\n<div class=\"bg-white shadow-sm rounded-lg border border-gray-100 <%= local_assigns[:class] %>\">\n  <% if local_assigns[:header].present? %>\n    <div class=\"px-6 py-4 border-b border-gray-100\">\n      <% if local_assigns[:header_content] %>\n        <%= header_content %>\n      <% else %>\n        <div class=\"flex justify-between items-center\">\n          <h2 class=\"text-xl font-semibold\"><%= header %></h2>\n          \n          <% if local_assigns[:actions].present? %>\n            <div class=\"flex space-x-2\">\n              <% actions.each do |action| %>\n                <%= link_to action[:label], action[:url], class: action[:class] || 'btn-sm btn-secondary' %>\n              <% end %>\n            </div>\n          <% end %>\n        </div>\n      <% end %>\n    </div>\n  <% end %>\n  \n  <div class=\"p-6\">\n    <%= content %>\n  </div>\n  \n  <% if local_assigns[:footer].present? %>\n    <div class=\"px-6 py-4 border-t border-gray-100 bg-gray-50 rounded-b-lg\">\n      <%= footer %>\n    </div>\n  <% end %>\n</div>\n```\n2. Update CSS to ensure consistent card styling:\n```css\n/* Add to app/assets/stylesheets/custom.css */\n.card {\n  @apply bg-white shadow-sm rounded-lg border border-gray-100;\n}\n\n.card-header {\n  @apply px-6 py-4 border-b border-gray-100;\n}\n\n.card-body {\n  @apply p-6;\n}\n\n.card-footer {\n  @apply px-6 py-4 border-t border-gray-100 bg-gray-50 rounded-b-lg;\n}\n```\n3. Update all views to use the standardized card component\n4. Ensure consistent styling across all sections",
        "testStrategy": "1. Verify card component displays correctly across all sections\n2. Test different card configurations (with/without header, footer)\n3. Verify styling is consistent with design patterns\n4. Test responsive behavior on mobile devices\n5. Verify all brand colors are applied correctly from custom.css",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Standardized Form Components",
        "description": "Create standardized form components with SimpleForm integration and brand-colored focus states.",
        "details": "1. Configure SimpleForm to use custom styling:\n```ruby\n# config/initializers/simple_form.rb\nSimpleForm.setup do |config|\n  config.wrappers :default, class: 'form-group' do |b|\n    b.use :html5\n    b.use :placeholder\n    b.use :label, class: 'form-label'\n    b.use :input, class: 'form-input', error_class: 'border-red-500'\n    b.use :error, wrap_with: { tag: :p, class: 'mt-1 text-sm text-red-600' }\n    b.use :hint, wrap_with: { tag: :p, class: 'mt-1 text-sm text-gray-500' }\n  end\nend\n```\n2. Add custom form styles to `app/assets/stylesheets/custom.css`:\n```css\n/* Form styles */\n.form-group {\n  @apply mb-4;\n}\n\n.form-label {\n  @apply block text-sm font-medium text-gray-700 mb-1;\n}\n\n.form-input {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50;\n}\n\n.form-select {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50;\n}\n\n.form-checkbox {\n  @apply rounded border-gray-300 text-primary focus:ring-primary;\n}\n\n.form-radio {\n  @apply border-gray-300 text-primary focus:ring-primary;\n}\n\n.form-textarea {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50;\n}\n```\n3. Create a shared form layout partial at `app/views/shared/_form_layout.html.erb`:\n```erb\n<div class=\"card mb-6\">\n  <div class=\"p-6\">\n    <h2 class=\"text-xl font-semibold mb-4\"><%= title %></h2>\n    <%= form_content %>\n  </div>\n</div>\n\n<div class=\"flex justify-end space-x-4\">\n  <%= link_to 'Cancel', cancel_path, class: 'btn-secondary' %>\n  <%= submit_button %>\n</div>\n```\n4. Update all form views to use the standardized form components\n5. Ensure consistent styling across all forms",
        "testStrategy": "1. Verify form components display correctly across all sections\n2. Test form validation and error display\n3. Verify focus states use brand colors from custom.css\n4. Test different input types (text, select, checkbox, etc.)\n5. Verify responsive behavior on mobile devices\n6. Test form submission and error handling",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Standardized Table Component",
        "description": "Create a standardized table component with responsive design, proper spacing, and hover states.",
        "details": "1. Create a shared partial at `app/views/shared/_table.html.erb`:\n```erb\n<div class=\"overflow-x-auto\">\n  <table class=\"min-w-full divide-y divide-gray-200\">\n    <thead>\n      <tr>\n        <% columns.each do |column| %>\n          <th class=\"<%= column[:class] || 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider' %>\">\n            <% if column[:sortable] %>\n              <%= link_to column[:label], column[:sort_url], class: 'flex items-center group', data: { turbo_action: 'advance' } %>\n              <% if column[:sort_direction] %>\n                <svg class=\"ml-1 h-4 w-4 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <% if column[:sort_direction] == 'asc' %>\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 15l7-7 7 7\" />\n                  <% else %>\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\" />\n                  <% end %>\n                </svg>\n              <% else %>\n                <svg class=\"ml-1 h-4 w-4 text-gray-400 opacity-0 group-hover:opacity-100\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 15l7-7 7 7\" />\n                </svg>\n              <% end %>\n            <% else %>\n              <%= column[:label] %>\n            <% end %>\n          </th>\n        <% end %>\n      </tr>\n    </thead>\n    <tbody class=\"bg-white divide-y divide-gray-200\">\n      <% if items.any? %>\n        <% items.each do |item| %>\n          <tr id=\"<%= dom_id(item) if defined?(dom_id) %>\" class=\"hover:bg-gray-50\">\n            <%= yield item %>\n          </tr>\n        <% end %>\n      <% else %>\n        <tr>\n          <td colspan=\"<%= columns.size %>\" class=\"px-6 py-10 text-center text-gray-500\">\n            <%= empty_message || 'No items found' %>\n          </td>\n        </tr>\n      <% end %>\n    </tbody>\n  </table>\n</div>\n\n<% if defined?(pagy) && pagy.pages > 1 %>\n  <div class=\"mt-4 flex justify-between items-center\">\n    <p class=\"text-sm text-gray-700\">\n      Showing <span class=\"font-medium\"><%= pagy.from %></span> to <span class=\"font-medium\"><%= pagy.to %></span> of <span class=\"font-medium\"><%= pagy.count %></span> results\n    </p>\n    <%== pagy_nav(pagy) %>\n  </div>\n<% end %>\n```\n2. Add custom table styles to `app/assets/stylesheets/custom.css`:\n```css\n/* Table styles */\n.table-container {\n  @apply overflow-x-auto;\n}\n\n.table {\n  @apply min-w-full divide-y divide-gray-200;\n}\n\n.table-header {\n  @apply px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;\n}\n\n.table-cell {\n  @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;\n}\n\n.table-cell-actions {\n  @apply px-6 py-4 whitespace-nowrap text-right text-sm font-medium;\n}\n```\n3. Create a Stimulus controller for sortable tables at `app/javascript/controllers/sortable_table_controller.js`\n4. Update all table views to use the standardized table component\n5. Ensure consistent styling across all tables",
        "testStrategy": "1. Verify table component displays correctly across all sections\n2. Test sortable columns functionality\n3. Test empty state display\n4. Verify pagination works correctly\n5. Test responsive behavior on mobile devices\n6. Verify hover states work correctly\n7. Test with various data sets to ensure proper rendering",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Standardized Button Components",
        "description": "Create standardized button components with primary, secondary, and danger variants using brand colors.",
        "details": "1. Add custom button styles to `app/assets/stylesheets/custom.css`:\n```css\n/* Button styles */\n.btn {\n  @apply inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;\n}\n\n.btn-primary {\n  @apply btn bg-gradient-to-r from-primary to-primary-dark text-white hover:from-primary-dark hover:to-primary-dark focus:ring-primary;\n}\n\n.btn-secondary {\n  @apply btn bg-white border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500;\n}\n\n.btn-danger {\n  @apply btn bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;\n}\n\n.btn-success {\n  @apply btn bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;\n}\n\n.btn-sm {\n  @apply px-3 py-1.5 text-xs;\n}\n\n.btn-lg {\n  @apply px-6 py-3 text-base;\n}\n\n.btn-icon {\n  @apply p-2;\n}\n```\n2. Create a shared button component at `app/helpers/button_helper.rb`:\n```ruby\nmodule ButtonHelper\n  def button_tag(content = nil, options = nil, &block)\n    options ||= {}\n    options[:class] = class_names(options[:class], 'btn')\n    \n    if options[:variant].present?\n      options[:class] = class_names(options[:class], \"btn-#{options[:variant]}\")\n      options.delete(:variant)\n    end\n    \n    if options[:size].present?\n      options[:class] = class_names(options[:class], \"btn-#{options[:size]}\")\n      options.delete(:size)\n    end\n    \n    super(content, options, &block)\n  end\n  \n  def link_button_to(name = nil, options = nil, html_options = nil, &block)\n    html_options ||= {}\n    html_options[:class] = class_names(html_options[:class], 'btn')\n    \n    if html_options[:variant].present?\n      html_options[:class] = class_names(html_options[:class], \"btn-#{html_options[:variant]}\")\n      html_options.delete(:variant)\n    end\n    \n    if html_options[:size].present?\n      html_options[:class] = class_names(html_options[:class], \"btn-#{html_options[:size]}\")\n      html_options.delete(:size)\n    end\n    \n    link_to(name, options, html_options, &block)\n  end\nend\n```\n3. Update all views to use the standardized button components\n4. Ensure consistent styling across all buttons",
        "testStrategy": "1. Verify button components display correctly across all sections\n2. Test different button variants (primary, secondary, danger)\n3. Test different button sizes (default, sm, lg)\n4. Verify hover and focus states work correctly\n5. Test button helpers in various contexts\n6. Verify all brand colors are applied correctly from custom.css",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Empty State Component Implementation",
        "description": "Create a standardized empty state component with branded messaging and call-to-action buttons.",
        "details": "1. Create a shared partial at `app/views/shared/_empty_state.html.erb`:\n```erb\n<div class=\"text-center py-12\">\n  <% if local_assigns[:icon].present? %>\n    <div class=\"mx-auto h-12 w-12 text-gray-400\">\n      <%= icon %>\n    </div>\n  <% else %>\n    <svg class=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\" />\n    </svg>\n  <% end %>\n  \n  <h3 class=\"mt-4 text-lg font-medium text-gray-900\"><%= title %></h3>\n  <p class=\"mt-1 text-sm text-gray-500\"><%= description %></p>\n  \n  <% if local_assigns[:action_text].present? && local_assigns[:action_path].present? %>\n    <div class=\"mt-6\">\n      <%= link_to action_text, action_path, class: 'btn-primary' %>\n    </div>\n  <% end %>\n</div>\n```\n2. Create a set of standard empty state icons for different contexts (categories, budgets, entries, etc.)\n3. Update all views to use the standardized empty state component\n4. Ensure consistent styling across all empty states",
        "testStrategy": "1. Verify empty state component displays correctly across all sections\n2. Test with and without custom icons\n3. Test with and without action buttons\n4. Verify styling is consistent with design patterns\n5. Test responsive behavior on mobile devices",
        "priority": "medium",
        "dependencies": [
          1,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Mobile Responsiveness Implementation",
        "description": "Ensure all new interfaces work well on mobile devices with appropriate responsive design patterns.",
        "details": "1. Review all new components and views for mobile responsiveness\n2. Implement responsive design patterns for each component:\n   - **Navigation**: Collapsible sidebar on mobile\n   - **Tables**: Horizontal scrolling on small screens\n   - **Cards**: Single column layout on mobile\n   - **Forms**: Full-width inputs on mobile\n   - **Buttons**: Appropriate sizing and spacing on mobile\n3. Add responsive utility classes to `app/assets/stylesheets/custom.css`:\n```css\n/* Responsive utilities */\n@media (max-width: 640px) {\n  .mobile-full-width {\n    width: 100%;\n  }\n  \n  .mobile-stack {\n    flex-direction: column;\n  }\n  \n  .mobile-hidden {\n    display: none;\n  }\n}\n```\n4. Test all views on various screen sizes and devices\n5. Implement responsive navigation using Stimulus.js:\n```javascript\n// app/javascript/controllers/mobile_nav_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [\"sidebar\"]\n  \n  toggle() {\n    this.sidebarTarget.classList.toggle('hidden')\n  }\n  \n  close() {\n    if (window.innerWidth < 768) {\n      this.sidebarTarget.classList.add('hidden')\n    }\n  }\n  \n  // Close sidebar when clicking outside on mobile\n  clickOutside(event) {\n    if (window.innerWidth < 768 && !this.sidebarTarget.contains(event.target) && !this.element.contains(event.target)) {\n      this.sidebarTarget.classList.add('hidden')\n    }\n  }\n}\n```\n6. Update the layout to use the mobile navigation controller",
        "testStrategy": "1. Test all views on various screen sizes (mobile, tablet, desktop)\n2. Verify navigation works correctly on mobile devices\n3. Test tables with horizontal scrolling on small screens\n4. Verify forms are usable on mobile devices\n5. Test touch interactions on mobile devices\n6. Verify all components maintain proper spacing and alignment on mobile",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          5,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Performance Optimization Implementation",
        "description": "Implement performance optimizations for database queries, frontend rendering, and overall application responsiveness.",
        "details": "1. Optimize database queries:\n   - Add proper indexes to relevant tables\n   - Implement eager loading for associations\n   - Use counter caches for frequently accessed counts\n   - Add database-level scopes for common queries\n\n2. Implement frontend performance optimizations:\n   - Use Turbo Drive for navigation\n   - Implement Turbo Frames for partial page updates\n   - Use Stimulus controllers for interactive elements\n   - Optimize CSS with proper specificity\n\n3. Add pagination for large datasets using Pagy gem:\n```ruby\n# Gemfile\ngem 'pagy', '~> 6.0'\n\n# app/controllers/application_controller.rb\ninclude Pagy::Backend\n\n# app/helpers/application_helper.rb\ninclude Pagy::Frontend\n```\n\n4. Implement controller-level optimizations:\n```ruby\n# Example for EntriesController\ndef index\n  @pagy, @entries = pagy(Entry.includes(:category, :item).order(date: :desc), items: 20)\n  @expense_entries = @entries.select { |e| e.category.expense? }\n  @income_entries = @entries.select { |e| e.category.income? }\n  @savings_entries = @entries.select { |e| e.category.savings? }\n  \n  respond_to do |format|\n    format.html\n    format.turbo_stream if params[:query].present?\n  end\nend\n```\n\n5. Add caching for expensive operations:\n```ruby\n# app/models/category.rb\ndef total_amount\n  Rails.cache.fetch([self, 'total_amount']) do\n    entries.sum(:amount)\n  end\nend\n```\n\n6. Optimize asset loading:\n   - Use Webpacker for JavaScript bundling\n   - Implement proper asset precompilation\n   - Use image optimization for any images\n\n7. Implement debounced search inputs using Stimulus.js",
        "testStrategy": "1. Measure page load times before and after optimizations\n2. Test database query performance with large datasets\n3. Verify pagination works correctly with large datasets\n4. Test caching effectiveness for expensive operations\n5. Verify Turbo Drive and Turbo Frames work correctly\n6. Test search performance with debounced inputs\n7. Verify mobile performance is acceptable",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          5,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-14T21:48:01.158Z",
      "updated": "2025-07-20T21:17:43.581Z",
      "description": "Tasks for ui-ux-improvements context"
    }
  }
}