# Task ID: 12
# Title: Standardized Button Components
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create standardized button components with primary, secondary, and danger variants using brand colors.
# Details:
1. Add custom button styles to `app/assets/stylesheets/custom.css`:
```css
/* Button styles */
.btn {
  @apply inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.btn-primary {
  @apply btn bg-gradient-to-r from-primary to-primary-dark text-white hover:from-primary-dark hover:to-primary-dark focus:ring-primary;
}

.btn-secondary {
  @apply btn bg-white border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500;
}

.btn-danger {
  @apply btn bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
}

.btn-success {
  @apply btn bg-green-600 text-white hover:bg-green-700 focus:ring-green-500;
}

.btn-sm {
  @apply px-3 py-1.5 text-xs;
}

.btn-lg {
  @apply px-6 py-3 text-base;
}

.btn-icon {
  @apply p-2;
}
```
2. Create a shared button component at `app/helpers/button_helper.rb`:
```ruby
module ButtonHelper
  def button_tag(content = nil, options = nil, &block)
    options ||= {}
    options[:class] = class_names(options[:class], 'btn')
    
    if options[:variant].present?
      options[:class] = class_names(options[:class], "btn-#{options[:variant]}")
      options.delete(:variant)
    end
    
    if options[:size].present?
      options[:class] = class_names(options[:class], "btn-#{options[:size]}")
      options.delete(:size)
    end
    
    super(content, options, &block)
  end
  
  def link_button_to(name = nil, options = nil, html_options = nil, &block)
    html_options ||= {}
    html_options[:class] = class_names(html_options[:class], 'btn')
    
    if html_options[:variant].present?
      html_options[:class] = class_names(html_options[:class], "btn-#{html_options[:variant]}")
      html_options.delete(:variant)
    end
    
    if html_options[:size].present?
      html_options[:class] = class_names(html_options[:class], "btn-#{html_options[:size]}")
      html_options.delete(:size)
    end
    
    link_to(name, options, html_options, &block)
  end
end
```
3. Update all views to use the standardized button components
4. Ensure consistent styling across all buttons

# Test Strategy:
1. Verify button components display correctly across all sections
2. Test different button variants (primary, secondary, danger)
3. Test different button sizes (default, sm, lg)
4. Verify hover and focus states work correctly
5. Test button helpers in various contexts
6. Verify all brand colors are applied correctly from custom.css
